---
title: "PrÃ¡tica AvanÃ§ada de Data Science e Visualization"
author: "LaboratÃ³rios"
format: 
  insper-revealjs:
    self-contained: true
    hash-type: number
execute:
  freeze: true
---

## Meu papel

Meu papel nessa disciplina serÃ¡ ajudar no aprendizado da parte tÃ©cnica -- cÃ³digos etc.

```{r}
#| include: false
library(tidyverse)
match_min <- read_rds(here::here("data-raw/rds/match_min.rds"))
team <- read_rds(here::here("data-raw/rds/team.rds"))
team_attributes <- read_rds(here::here("data-raw/rds/team_attributes.rds"))
```


::: incremental

TambÃ©m posso dar pitacos nas apresentaÃ§Ãµes e salvÃ¡-los em situaÃ§Ãµes de desespero (atendimentos extras).

:::

## Lab 01

Nesse lab, nosso objetivo serÃ¡ construir soluÃ§Ãµes em **R** e/ou **python** para problemas comuns de transformaÃ§Ã£o e visualizaÃ§Ã£o de dados.

::: incremental

- 4 equipes de **4 ou 5 pessoas**:

- Vamos utilizar o ChatGPT para exercÃ­cios mais difÃ­ceis. 

- Eu tenho acesso ao GPT-4, vocÃªs podem pedir para eu usar.

- No final de cada exercÃ­cio, discutiremos aspectos teÃ³ricos sobre as ferramentas.

:::

## PrÃªmios

-   As melhores resoluÃ§Ãµes receberÃ£o stickers. A quantidade de stickers depende da dificuldade do exercÃ­cio.

![](img/stickers.jpg){.absolute left="25%" bottom="10vh" width="50%"}

## Vamos lÃ¡!

![](img/cat.gif){.absolute left="25%" bottom="10vh" width="50%"}

## ExercÃ­cio 1.1 (transformaÃ§Ã£o) ğŸ›‘

::: panel-tabset

### Entrada

```{r}
#| echo: true
glimpse(match_min)
```

### Tarefa

- Selecionar as colunas `country_id`, `country_name`, `home_team_goal`, `away_team_goal`.
- Filtrar para os campeonatos dos maiores paÃ­ses (Espanha, Inglaterra, ItÃ¡lia, FranÃ§a e Alemanha).
- Criar uma coluna `total_goals`, com o total de gols.
- Calcular a mÃ©dia, a mediana e o desvio padrÃ£o de gols por paÃ­s
- Ordenar o resultado de forma decrescente pela mÃ©dia

### SaÃ­da R

```{r}
#| echo: false
sumario <- match_min |> 
  select(country_id, country_name, home_team_goal, away_team_goal) |> 
  filter(country_id %in% c(21518, 1729, 4769, 7809, 10257)) |> 
  mutate(total_goals = home_team_goal + away_team_goal) |> 
  group_by(country_name) |> 
  summarise(
    media = mean(total_goals),
    desvio_padrao = sd(total_goals),
    mediana = median(total_goals)
  ) |> 
  arrange(desc(media))

sumario
```

### SaÃ­da Python

```{python}
#| echo: false
#| eval: true

import pandas as pd
pd.options.mode.chained_assignment = None

df = r.match_min[['country_id', 'country_name', 'home_team_goal', 'away_team_goal']]
df.loc[:, 'total_goals'] = df['home_team_goal'] + df['away_team_goal']
df = df[df['country_id'].isin([21518, 1729, 4769, 7809, 10257])]

df = df.groupby('country_name')['total_goals'].agg(['mean', 'median', 'std'])
df.sort_values('mean', ascending = False)
```
:::

## ExercÃ­cio 1.2 (barras exploratÃ³rio) ğŸ›‘

::: panel-tabset

### Resultado esperado

```{r}
knitr::include_graphics("img/plot1.2.png")
```

:::


## ExercÃ­cio 1.3 (barras otimizado) ğŸ›‘ğŸ›‘

::: panel-tabset

### Resultado esperado

```{r}
#| out-width: 80%
knitr::include_graphics("img/plot1.3.png")
```

### Dicas

- Utilize `case_when()` ou `case_match()` para mudar os nomes dos paÃ­ses.

- Utilize `fct_reorder()` para ordenar a coluna `country_name` adequadamente.

- Utilize `scale_fill_manual()` com os valores `cores <- c("#C4161C", "#009491")`

- Utilize o ChatGPT para os aspectos estÃ©ticos.

:::

# DiscussÃ£o

## ExercÃ­cio 2.1 (join e pivotagem) ğŸ›‘ğŸ›‘ğŸ›‘

::: panel-tabset
### Entrada

```{r}
glimpse(team_attributes)
```

### Tarefa

- Unir a base `team_attributes` com a base `team`
- Filtrar para os times "Real Madrid", "Bayern", "Milan", "PSG" e "Manchester United"
- Retirar as colunas que acabam com `_class`
- Transformar a coluna `date` em `year`, contendo o ano
- Calcular a mÃ©dia das estatÃ­sticas por tipo (`build_up_play_*`, `chance_creation_*`, `defence_*`) e empilhar as estatÃ­sticas por tipo (nÃ£o necessariamente nessa ordem).


### SaÃ­da R

```{r}
#| echo: false

times <- c(243, 11, 21, 73, 47)

team_filter <- team |> 
  filter(team_fifa_api_id %in% times) |> 
  select(-id)

sumario <- team_attributes |> 
  inner_join(team_filter, join_by(team_api_id, team_fifa_api_id)) |> 
  select(-ends_with("class")) |> 
  mutate(year = year(ymd_hms(date))) |> 
  pivot_longer(c(build_up_play_speed:defence_team_width)) |> 
  separate_wider_delim(
    name, delim = "_", 
    names = c("type", "metric"), 
    too_many = "merge"
  ) |> 
  summarise(
    value = mean(value, na.rm = TRUE),
    .by = c(year, type, team_short_name, team_long_name)
  )  

sumario
```

### SaÃ­da Python

Vou tentar durante a aula usando o ChatGPT ğŸ˜…

:::

## ExercÃ­cio 2.2 (linhas exploratÃ³rio) ğŸ›‘ğŸ›‘

::: panel-tabset

### Resultado esperado

```{r}
#| out-width: 80%
knitr::include_graphics("img/plot2.2.png")
```

:::

## ExercÃ­cio 2.3 (linhas otimizado) ğŸ›‘ğŸ›‘ğŸ›‘

::: panel-tabset

### Resultado esperado

```{r}
#| out-width: 80%
knitr::include_graphics("img/plot2.3.png")
```

### Dicas

- Utilize `case_when()` ou `case_match()` para mudar os nomes da coluna `categoria`.

- Utilize o parÃ¢metro `legend.position=` da funÃ§Ã£o `theme()`

- Utilize `geom_smooth()` para montar a banda de confianÃ§a no fundo.

- Utilize as cores anteriores + um cinza

- Utilize o ChatGPT para os aspectos estÃ©ticos.

:::

# DiscussÃ£o
